varying	vec3			vNormal;
varying vec3			vEyeVector;
varying vec2			vTexCoords;
varying vec3			vLight1Vector;
varying vec3			vCoords;
varying mat3			vTBN;

uniform float fPlanetRadius;
uniform float fAtmosRadius;


bool IOsphereIntersect(vec3 vPos,vec3 vRay,float Radius,inout vec3 vIntersect,inout vec3 vExit,inout float Dist) {
	float Radius2= Radius*Radius;	
	float tca = dot(vPos,normalize(vRay));
	if (tca < 0.0 ) {
		return false;
	}
	//float d2 = length(ooposition - vPos ) - pow(tca,2.0);
	float d2 = length(vPos) - pow(tca,2.0);
	if (d2 > Radius2) { 
		return false;
	}


	float thc = sqrt( Radius2 - d2 );
	float t0 = tca - thc;
	float t1 = tca + thc;
	Dist = thc*2.0;
    Dist = length( t0 - t1 );
    float tnear;
    float tfar;
    if ( t0 > 0.0 ) {
        tnear = t0;	
        tfar = t1;

    } else {
        tnear = t1;
        tfar = t0;
    }
    vIntersect = vPos + tnear * vRay;
    vExit = vPos + tfar * vRay; 
	return true;	
}


varying float cosPointEye = 0.0;
varying float cosPointLight = 0.0; 
varying float maxOccAngle = 0.0;

void main(void)
{
	vCoords = vec3(0.0);//gl_Vertex.xyz;
	
	vNormal = normalize(gl_NormalMatrix * gl_Normal);
	vec3 binormal = cross(vNormal, gl_NormalMatrix * vec3(0, 1, 0));
	vec3 tangent = -cross(vNormal, binormal);
	
	vTBN = mat3(tangent, binormal, vNormal);
	
	vEyeVector = -vec3(gl_ModelViewMatrix * gl_Vertex);

	vLight1Vector = gl_LightSource[1].position.xyz + vEyeVector;
	
	vTexCoords = gl_MultiTexCoord0.st;

	gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;

    vec3 VertexObj = gl_Normal;
    // 
    float d = sqrt( pow(fAtmosRadius,2.0) - pow(fPlanetRadius,2.0) );
    float ad= fAtmosRadius - fPlanetRadius;
    
    // maximum angle
    //float maxOccAngle =  ( ad / d );
    maxOccAngle = d / fAtmosRadius;

    //vCoords.r = maxOccAngle;
    //vCoords.r = dot( normalize(VertexObj) , -normalize( vLight1Vector ) );

    //vCoords.b =  dot( normalize( vec3(gl_Vertex) ) , normalize( vec3(gl_Normal) )  ); 
                   
    //vCoords.r = maxOccAngle;
    vec3 Point =  vec3( gl_NormalMatrix * gl_Normal);
    vec3 Eye =  -vec3( gl_ModelViewMatrix * gl_Vertex );
    vec3 Light = gl_LightSource[1].position.xyz ;

    // the angle the camera ray intersects the atmosphere, below maxOccAngle is a 
    //  insersection with the planet.
    cosPointEye = dot( normalize(Point) , normalize(Eye) );
    // the angle the Light intersects with the atmosphere, below maxOccAngle is
    //  occlusion
    cosPointLight = dot( normalize(Point) , normalize(Light) );

    //vCoords.g = step( maxOccAngle, cosPointEye ) ; // cosPosEye;
    //vCoords.b = abs( dot( normalize(Point) , normalize(Eye) ) );
    //vCoords.r =  dot( normalize(Point) , normalize(Light) );

}


/*
{
	vCoords = gl_Vertex.xyz;
	
	
	// Build tangent basis.
	vec3 normal = normalize(gl_NormalMatrix * gl_Normal);
	vec3 binormal = cross(normal, gl_NormalMatrix * vec3(0, 1, 0));
	vec3 tangent = -cross(normal, binormal);
	
	mat3 TBN = mat3(tangent, binormal, normal);
	
	eyeVector = -vec3(gl_ModelViewMatrix * gl_Vertex);
	vEyeVector = eyeVector * TBN;

	vec3 light1Vector = gl_LightSource[1].position.xyz + eyeVector;
	vLight1Vector = light1Vector * TBN;
	
	//
	//vVertexWorld = ooposition + normal * fAtmosRadius;
	vVertexObj   = vec3(gl_ModelViewMatrix * gl_Vertex);
	//vSurfaceWorld = ooposition + normal * fPlanetRadius;

    // relative position ? uniform binding
	//CameraPos = ooposition + normal * eyeVector * fAtmosRadius;
	
	
	vNormal = gl_Normal;
    vCoords = gl_Vertex.xyz;
	vLight1Pos = (ooposition - gl_LightSource[1].position.xyz) * vNormal ;
	vTexCoords = gl_MultiTexCoord0.st;
	gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;





}
*/
