//#version 120

/*
	oolite-default-atmosphere.vertex
	Default vertex shader for Oolite's NEW_PLANETS
	
	
	© 2009–2013 Jens Ayton
	
	This program is free software; you can redistribute it and/or
	modify it under the terms of the GNU General Public License
	as published by the Free Software Foundation; either version 2
	of the License, or (at your option) any later version.
	
	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.
	
	You should have received a copy of the GNU General Public License
	along with this program; if not, write to the Free Software
	Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
	MA 02110-1301, USA.
*/

// No vNormal, because normal is always 0,0,1 in tangent space.


varying vec3			vEyeVector;
varying vec2			vTexCoords;
varying vec3			vLight1Vector;
varying vec3			vCoords;

varying vec3			CameraPos;

varying vec4			vColor;
varying vec3			vVertexWorld;
varying vec3			vSurfaceWorld;
varying vec3			vVertexObj;
varying vec3			eyeVector;

varying vec3			vLight1Pos;
varying vec3			vNormal;


//uniform vec4  uColor;
uniform float fPlanetRadius;
uniform float fAtmosRadius;
//uniform mat4 Object2World;

uniform vec3 ooposition;
uniform vec4 orientation;
uniform vec3 cameraRelativePosition;

//------------------


bool IOsphereIntersect(vec3 vPos,vec3 vRay,float Radius,inout vec3 vIntersect,inout vec3 vExit,inout float Dist) {
	float Radius2= Radius*Radius;	
	float tca = dot(vPos,normalize(vRay));
	if (tca < 0.0 ) {
		return false;
	}
	//float d2 = length(ooposition - vPos ) - pow(tca,2.0);
	float d2 = length(vPos) - pow(tca,2.0);
	if (d2 > Radius2) { 
		return false;
	}


	float thc = sqrt( Radius2 - d2 );
	float t0 = tca - thc;
	float t1 = tca + thc;
	Dist = thc*2.0;
    Dist = length( t0 - t1 );
    float tnear;
    float tfar;
    if ( t0 > 0.0 ) {
        tnear = t0;	
        tfar = t1;

    } else {
        tnear = t1;
        tfar = t0;
    }
    vIntersect = vPos + tnear * vRay;
    vExit = vPos + tfar * vRay; 
	return true;	
}

void main(void)
{
	vCoords = gl_Vertex.xyz;
	
	
	// Build tangent basis.
	vec3 normal = normalize(gl_NormalMatrix * gl_Normal);
	vec3 binormal = cross(normal, gl_NormalMatrix * vec3(0, 1, 0));
	vec3 tangent = -cross(normal, binormal);
	
	mat3 TBN = mat3(tangent, binormal, normal);
	
	eyeVector = -vec3(gl_ModelViewMatrix * gl_Vertex);
	vEyeVector = eyeVector * TBN;

	vec3 light1Vector = gl_LightSource[1].position.xyz + eyeVector;
	vLight1Vector = light1Vector * TBN;
	
	//
	//vVertexWorld = ooposition + normal * fAtmosRadius;
	vVertexObj   = gl_NormalMatrix * gl_Normal;
	//vSurfaceWorld = ooposition + normal * fPlanetRadius;

    // relative position ? uniform binding
	//CameraPos = ooposition + normal * eyeVector * fAtmosRadius;
	
	
	vNormal = gl_Normal;
    vCoords = gl_Vertex.xyz;
	vLight1Pos = (ooposition - gl_LightSource[1].position.xyz) * vNormal ;
	vTexCoords = gl_MultiTexCoord0.st;
	gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;





}

